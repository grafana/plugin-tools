import { readFileSync, writeFileSync } from 'node:fs';
import path from 'node:path';
import { getPluginJsonPath } from './utils';
import { GENERATED_FILE, SOURCE_DIR } from './constants';

/**
 * Generates a Routes enum with actual values from plugin.json
 */
export function generateCode() {
  const pluginJsonPath = getPluginJsonPath();
  const pluginJson = JSON.parse(readFileSync(pluginJsonPath, 'utf-8'));
  const hasIncludes = pluginJson.includes?.length > 0;

  if (!hasIncludes) {
    return;
  }

  // Create dynamic import statement
  const imports = hasIncludes ? 'PluginSchemaInclude' : '';

  // Generate includes enum if includes exist
  const includesEnum = hasIncludes
    ? `export enum PluginIncludePaths {
    ${pluginJson.includes.map((inc) => `${inc.name.replace(/\s+/g, '')} = "${inc.path?.replace(/%PLUGIN_ID%/, pluginJson.id)}"`).join(',\n')}
  }`
    : '';

  // Generate includes map if includes exist
  const includesMap = hasIncludes
    ? `export const PluginIncludes: ReadonlyMap<PluginIncludePaths, PluginSchemaInclude> = new Map([
    ${pluginJson.includes
      .map((inc) => {
        const enumKey = inc.name.replace(/\s+/g, '');
        // Create the include object without JSON.stringify to preserve the enum reference
        const include = {
          ...inc,
          path: `PluginIncludePaths.${enumKey}`
        };
        // Convert to string but replace the quoted enum reference with the actual reference
        const includeStr = JSON.stringify(include).replace(
          `"PluginIncludePaths.${enumKey}"`,
          `PluginIncludePaths.${enumKey}`
        );
        return `[PluginIncludePaths.${enumKey}, ${includeStr}]`;
      })
      .join(',\n')}
  ]);`
    : '';

  const fileContent = `// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED FROM PLUGIN.JSON
${imports ? `import { ${imports} } from '../.config/types/pluginSchema';` : ''}

${includesEnum}

${includesMap}
`;

  const outputPath = path.join(process.cwd(), SOURCE_DIR, GENERATED_FILE);
  writeFileSync(outputPath, fileContent);
}
