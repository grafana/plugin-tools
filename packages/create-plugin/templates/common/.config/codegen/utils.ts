import fs from 'fs';
import { execFile as nodeExecFile } from 'node:child_process';
import path from 'node:path';
import { promisify } from 'node:util';
import { CODEGEN_DIR, SOURCE_DIR } from '../{{frontendBundler}}/constants';

const execFile = promisify(nodeExecFile);

export async function prettifyFile(fileName: string) {
  try {
    const filePath = path.join(process.cwd(), SOURCE_DIR, CODEGEN_DIR, fileName);
    if (!fs.existsSync(filePath)) {
      return;
    }

    const command = 'npx';
    const args = ['prettier', '--write', filePath];
    await execFile(command, args);
  } catch (error) {
    console.error('Failed to prettify generated file:', error);
  }
}

export const FILE_HEADER_COMMENT = `/* ⚠️⚠️⚠️ THIS FILE WAS AUTOMATICALLY GENERATED FROM PLUGIN.JSON DO NOT EDIT THIS FILE DIRECTLY. ⚠️⚠️⚠️ */`;

export const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
};

export function logInfo(message: string, args: string) {
  console.log(`${colors.green}[codegen]${colors.reset} ${message}${colors.green} ${args}${colors.reset}`);
}

export function logWarning(message: string) {
  console.log(`${colors.green}[codegen]${colors.reset} ${colors.yellow}${message}${colors.reset}`);
}

export function logError(message: string) {
  console.log(`${colors.green}[codegen]${colors.reset} ${colors.red}${message}${colors.reset}`);
}

export function getCodegenDirPath() {
  return path.join(process.cwd(), SOURCE_DIR, CODEGEN_DIR);
}

function createVariableIdentifier(str: string) {
  const prefix = str
    .replace(/[^a-zA-Z0-9]/g, ' ')
    .split(' ')
    .filter((word) => word.length > 0)
    .map((word, index) =>
      index === 0 ? word.toLowerCase() : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
    )
    .join('');
  const postFix = 'Config';
  return `${prefix}${postFix}`;
}

export function getVariableName(title: string, unique: Set<string>) {
  let variableName = createVariableIdentifier(title);
  let counter = 1;

  while (unique.has(variableName)) {
    variableName = `${createVariableIdentifier(title)}${counter}`;
    counter++;
  }

  unique.add(variableName);
  return variableName;
}
